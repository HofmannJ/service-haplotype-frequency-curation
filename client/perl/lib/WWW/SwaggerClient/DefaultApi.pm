=begin comment

Haplotype Frequency Curation Service

Allows to store and return haplotype frequency data

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# hfc_get
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'hfc_get' } = { 
    	summary => '',
        params => $params,
        returns => 'HFCurationListResponse',
        };
}
# @return HFCurationListResponse
#
sub hfc_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/hfc';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HFCurationListResponse', $response);
    return $_response_object;
}

#
# hfc_population_get
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'hfc_population_get' } = { 
    	summary => '',
        params => $params,
        returns => 'PopulationResponse',
        };
}
# @return PopulationResponse
#
sub hfc_population_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/hfc/population';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PopulationResponse', $response);
    return $_response_object;
}

#
# hfc_population_population_id_get
#
# 
# 
# @param string $population_id The population id (required)
{
    my $params = {
    'population_id' => {
        data_type => 'string',
        description => 'The population id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_population_population_id_get' } = { 
    	summary => '',
        params => $params,
        returns => 'PopulationSubmissionResponse',
        };
}
# @return PopulationSubmissionResponse
#
sub hfc_population_population_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'population_id' is set
    unless (exists $args{'population_id'}) {
      croak("Missing the required parameter 'population_id' when calling hfc_population_population_id_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/population/{populationId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'population_id'}) {
        my $_base_variable = "{" . "populationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'population_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PopulationSubmissionResponse', $response);
    return $_response_object;
}

#
# hfc_post
#
# 
# 
# @param HFCurationRequest $hf_curation_request Haplotype Frequency Curation Data (required)
{
    my $params = {
    'hf_curation_request' => {
        data_type => 'HFCurationRequest',
        description => 'Haplotype Frequency Curation Data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_post' } = { 
    	summary => '',
        params => $params,
        returns => 'HFCurationResponse',
        };
}
# @return HFCurationResponse
#
sub hfc_post {
    my ($self, %args) = @_;

    # verify the required parameter 'hf_curation_request' is set
    unless (exists $args{'hf_curation_request'}) {
      croak("Missing the required parameter 'hf_curation_request' when calling hfc_post");
    }

    # parse inputs
    my $_resource_path = '/hfc';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'hf_curation_request'}) {
        $_body_data = $args{'hf_curation_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HFCurationResponse', $response);
    return $_response_object;
}

#
# hfc_submission_id_cohort_get
#
# 
# 
# @param string $submission_id The submission id (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_cohort_get' } = { 
    	summary => '',
        params => $params,
        returns => 'CohortData',
        };
}
# @return CohortData
#
sub hfc_submission_id_cohort_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_cohort_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}/cohort';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CohortData', $response);
    return $_response_object;
}

#
# hfc_submission_id_get
#
# 
# 
# @param string $submission_id The submission id that the haplotype frequencies were submitted under (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id that the haplotype frequencies were submitted under',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_get' } = { 
    	summary => '',
        params => $params,
        returns => 'HFCurationResponse',
        };
}
# @return HFCurationResponse
#
sub hfc_submission_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HFCurationResponse', $response);
    return $_response_object;
}

#
# hfc_submission_id_haplotypes_get
#
# 
# 
# @param string $submission_id The submission id (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_haplotypes_get' } = { 
    	summary => '',
        params => $params,
        returns => 'HaplotypeFrequencyData',
        };
}
# @return HaplotypeFrequencyData
#
sub hfc_submission_id_haplotypes_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_haplotypes_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}/haplotypes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HaplotypeFrequencyData', $response);
    return $_response_object;
}

#
# hfc_submission_id_labels_get
#
# 
# 
# @param string $submission_id The submission id (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_labels_get' } = { 
    	summary => '',
        params => $params,
        returns => 'LabelData',
        };
}
# @return LabelData
#
sub hfc_submission_id_labels_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_labels_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}/labels';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('LabelData', $response);
    return $_response_object;
}

#
# hfc_submission_id_population_get
#
# 
# 
# @param string $submission_id The submission id (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_population_get' } = { 
    	summary => '',
        params => $params,
        returns => 'PopulationData',
        };
}
# @return PopulationData
#
sub hfc_submission_id_population_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_population_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}/population';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PopulationData', $response);
    return $_response_object;
}

#
# hfc_submission_id_scope_get
#
# 
# 
# @param string $submission_id The submission id (required)
{
    my $params = {
    'submission_id' => {
        data_type => 'string',
        description => 'The submission id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'hfc_submission_id_scope_get' } = { 
    	summary => '',
        params => $params,
        returns => 'ScopeData',
        };
}
# @return ScopeData
#
sub hfc_submission_id_scope_get {
    my ($self, %args) = @_;

    # verify the required parameter 'submission_id' is set
    unless (exists $args{'submission_id'}) {
      croak("Missing the required parameter 'submission_id' when calling hfc_submission_id_scope_get");
    }

    # parse inputs
    my $_resource_path = '/hfc/{submissionId}/scope';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'submission_id'}) {
        my $_base_variable = "{" . "submissionId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'submission_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScopeData', $response);
    return $_response_object;
}

1;
